plugins {
    id "java-library"
    id "maven-publish"
    id "fabric-loom" version "0.2.7-SNAPSHOT"
    id "com.wynprice.cursemaven" version "2.1.1"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archive_name
version = project.mod_version
group = project.maven_group

def ENV = System.getenv()
version = version + "+" + (ENV.BUILD_NUMBER ? ("build." + ENV.BUILD_NUMBER) : "custom") + "-1.15"

minecraft {
    accessWidener = file("src/main/resources/digital_storage.accesswidener")
}

repositories {
    mavenLocal()
    jcenter()
    maven {
        name = "TehNut"
        url = "https://tehnut.info/maven"
    }
    maven {
        name = "Cotton Releases"
        url = "http://server.bbkr.space:8081/artifactory/libs-release"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    //needed to get nullability checks for MC source, otherwise using jetbrains annotations
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"


    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    compileOnly "org.jetbrains:annotations:19.0.0"

    modApi ("io.github.cottonmc:UniversalComponents:${project.uc_version}") {
        exclude(group: "com.github.NerdHubMC.Cardinal-Components-API")
        exclude(group: "com.github.OnyxStudios.Cardinal-Components-API")
    }
    modImplementation("me.shedaniel.cloth:config-2:${project.clothconfig_version}") {
        exclude(group: "io.github.prospector", module: "modmenu")
    }
    include("me.shedaniel.cloth:config-2:${project.clothconfig_version}") {
        exclude(group: "io.github.prospector", module: "modmenu")
    }

    modApi "io.github.OnyxStudios.Cardinal-Components-API:Cardinal-Components-API:${project.cca_version}"
    modImplementation("com.github.GlassPane:Mesh:${project.mesh_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc.mapped")
    }

    //only for testing
    modRuntime "io.github.prospector:modmenu:${project.modmenu_version}"
    modRuntime("me.shedaniel:RoughlyEnoughItems:${project.rei_version}")
    modRuntime("curse.maven:hwyla:${project.hwyla_version}") {
        transitive = false
    }
    modRuntime("TechReborn:TechReborn-1.15:${project.techreborn_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation project(":Graph-Draft")
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }

    rename '(.+).accesswidener', 'META-INF/$1.aww'
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE.md"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar)
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {

    }
}
